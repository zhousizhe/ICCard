# coding=utf-8

import sys
import tkinter as tk
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5 import QtCore, QtGui, QtWidgets

from UI.assistant_information import Assistant_Information_Form
from UI.assistant_insert import Assistant_insert_Form
from UI.assistant_update_password import Assistant_Upassword_Form
from UI.card import Card_Form
from UI.create_brancch import Create_Brancch_Form
from UI.manage_information import Manage_Information_Form
from UI.recharge import Recharge_Form


class Ui_Form_Tree_View(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        hbox = QHBoxLayout(self)
        # top = QFrame(self)
        # 限制最大宽度
        # top.setMaximumSize(tk.Tk().winfo_screenwidth()*0.1, tk.Tk().winfo_screenheight()*0.1)
        # top.setFrameShape(QFrame.StyledPanel)
        left = QFrame(self)
        # left.setFrameShape(QFrame.StyledPanel)
        right = QFrame(self)
        # right.setFrameShape(QFrame.StyledPanel)
        # splitter = QSplitter(Qt.Vertical)
        # splitter.addWidget(top)
        splitter1 = QSplitter(Qt.Horizontal)
        splitter1.addWidget(left)
        splitter1.setSizes([25, ])  # 设置分隔条位置
        splitter1.addWidget(right)
        # splitter.setSizes([20, ])  # 设置分隔条位置
        # splitter.addWidget(splitter1)
        # hbox.addWidget(splitter)
        hbox.addWidget(splitter1)
        self.setLayout(hbox)

        # 树
        self.tree = QTreeWidget(left)
        # self.tree.setStyleSheet("background-color:#eeeeee;border:outset;color:#215b63;")
        self.tree.setAutoScroll(True)
        self.tree.setEditTriggers(QAbstractItemView.DoubleClicked | QAbstractItemView.EditKeyPressed)
        self.tree.setTextElideMode(Qt.ElideMiddle)
        #self.tree.setIndentation(30)
        self.tree.setRootIsDecorated(True)
        self.tree.setUniformRowHeights(False)
        self.tree.setItemsExpandable(True)
        self.tree.setAnimated(False)
        self.tree.setHeaderHidden(True)
        self.tree.setExpandsOnDoubleClick(True)
        self.tree.setObjectName("tree")
        self.tree.setMinimumSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight())

        # 设置根节点
        root = QTreeWidgetItem(self.tree)
        root.setText(0, 'IC卡')
        # 设置树形控件的列的宽度
        self.tree.setColumnWidth(0, 150)
        # 设置子节点1
        child1 = QTreeWidgetItem()
        child1.setText(0, '办卡')
        root.addChild(child1)
        # 设置子节点2
        child2 = QTreeWidgetItem(root)
        child2.setText(0, '充值')
        # 设置子节点3
        child3 = QTreeWidgetItem(root)
        child3.setText(0, 'IC卡信息管理')
        # 设置子节点4
        child4 = QTreeWidgetItem(root)
        child4.setText(0, '充值信息查询')
        # 跟节点1
        root = QTreeWidgetItem(self.tree)
        root.setText(0, '网点')
        # 设置子节点1
        child1 = QTreeWidgetItem()
        child1.setText(0, '创建网点')
        root.addChild(child1)
        # 设置子节点2
        child2 = QTreeWidgetItem(root)
        child2.setText(0, '网点信息管理')
        # 跟节点2
        root = QTreeWidgetItem(self.tree)
        root.setText(0, '营业员')
        # 设置子节点1
        child1 = QTreeWidgetItem()
        child1.setText(0, '添加营业员')
        root.addChild(child1)
        # 设置子节点2
        child2 = QTreeWidgetItem(root)
        child2.setText(0, '营业员信息管理')
        # 设置子节点2
        child3 = QTreeWidgetItem(root)
        child3.setText(0, '营业员密码修改')
        # 加载根节点的所有属性与子控件
        self.tree.addTopLevelItem(root)
        # 设置stackedWidget
        self.stackedWidget = QStackedWidget(right)
        self.stackedWidget.setMinimumSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight())


        # 设置第一个面板
        widget = QtWidgets.QWidget()
        ui = Card_Form()
        ui.setupUi(widget)
        # widget.setMinimumSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight()*2)
        # self.scroll = QScrollArea()
        # self.scroll.setWidget(widget)
        # self.form1 = self.scroll
        self.form1 = widget


        # 设置第二个面板
        widget = QtWidgets.QWidget()
        ui = Recharge_Form()
        ui.setupUi(widget)
        # widget.setMinimumSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight() * 2)
        # self.scroll = QScrollArea()
        # self.scroll.setWidget(widget)
        # self.form2 = self.scroll
        self.form2 = widget

        # 设置第三个面板
        widget = QtWidgets.QWidget()
        # ui = ()
        # ui.setupUi(widget)
        # self.scroll = QScrollArea()
        # self.scroll.setWidget(widget)
        self.form3 = widget

        # 设置第四个面板
        widget = QtWidgets.QWidget()
        # ui = Card_Form()
        # ui.setupUi(widget)
        self.form4 = widget

        # 设置第五个面板
        widget = QtWidgets.QWidget()
        ui = Create_Brancch_Form()
        ui.setupUi(widget)
        ui.pushButton_3.clicked.connect(self.test_click)
        # widget.setMinimumSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight() * 2)
        # self.scroll = QScrollArea()
        # self.scroll.setWidget(widget)
        # self.form5 = self.scroll
        self.form5 = widget

        # 设置第六个面板
        widget = QtWidgets.QWidget()
        ui = Manage_Information_Form()
        ui.setupUi(widget)
        # widget.setMinimumSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight() * 2)
        # self.scroll = QScrollArea()
        # self.scroll.setWidget(widget)
        # self.form6 = self.scroll
        self.form6 = widget

        # 设置第七个面板
        widget = QtWidgets.QWidget()
        ui = Assistant_insert_Form()
        ui.setupUi(widget)
        # widget.setMinimumSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight() * 2)
        # self.scroll = QScrollArea()
        # self.scroll.setWidget(widget)
        # self.form7 = self.scroll
        self.form7 = widget

        # 设置第八个面板
        widget = QtWidgets.QWidget()
        ui = Assistant_Information_Form()
        ui.setupUi(widget)
        # widget.setMinimumSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight() * 2)
        # self.scroll = QScrollArea()
        # self.scroll.setWidget(widget)
        # self.form8 = self.scroll
        self.form8 = widget

        # 设置第九个面板
        widget = QtWidgets.QWidget()
        ui = Assistant_Upassword_Form()
        ui.setupUi(widget)
        # widget.setMinimumSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight() * 2)
        # self.scroll = QScrollArea()
        # self.scroll.setWidget(widget)
        # self.form9 = self.scroll
        self.form9 = widget

        # 将面板，加入stackedWidget
        self.stackedWidget.addWidget(self.form1)
        self.stackedWidget.addWidget(self.form2)
        self.stackedWidget.addWidget(self.form3)
        self.stackedWidget.addWidget(self.form4)
        self.stackedWidget.addWidget(self.form5)
        self.stackedWidget.addWidget(self.form6)
        self.stackedWidget.addWidget(self.form7)
        self.stackedWidget.addWidget(self.form8)
        self.stackedWidget.addWidget(self.form9)

        # 树节点监听事件
        self.tree.clicked.connect(self.onClicked)


        # 窗口最大化
        self.showMaximized()
        self.setFixedSize(tk.Tk().winfo_screenwidth(), tk.Tk().winfo_screenheight())
        self.setWindowTitle('电动车充点卡管理系统')
        self.show()


        # # 窗口初始化
        # self.setWindowTitle('电动车充点卡管理系统')
        # self.resize(800, 600)
        # self.setMinimumWidth(800)
        # self.setMinimumHeight(600)
        # self.show()

    def onClicked(self,qmodeLindex):
        item=self.tree.currentItem()
        print('Key=%s,value=%s'%(item.text(0),item.text(1)))
        itemName = item.text(0)
        if itemName == "办卡":
            self.on_pushButton1_clicked()
        elif itemName == "充值":
            self.on_pushButton2_clicked()
        elif itemName == "IC卡信息管理":
            self.on_pushButton3_clicked()
        elif itemName == "充值信息查询":
            self.on_pushButton4_clicked()
        elif itemName == "创建网点":
            self.on_pushButton5_clicked()
        elif itemName == "网点信息管理":
            self.on_pushButton6_clicked()
        elif itemName == "添加营业员":
            self.on_pushButton7_clicked()
        elif itemName == "营业员信息管理":
            self.on_pushButton8_clicked()
        elif itemName == "营业员密码修改":
            self.on_pushButton9_clicked()
        else:
            print('返回主界面')


    # 按钮一：打开第一个面板
    def on_pushButton1_clicked(self):
        self.stackedWidget.setCurrentIndex(0)

    # 按钮二：打开第二个面板
    def on_pushButton2_clicked(self):
        self.stackedWidget.setCurrentIndex(1)

    # 按钮三：打开第三个面板
    def on_pushButton3_clicked(self):
        self.stackedWidget.setCurrentIndex(2)

    # 按钮四：打开第四个面板
    def on_pushButton4_clicked(self):
        self.stackedWidget.setCurrentIndex(3)

    # 按钮五：打开第五个面板
    def on_pushButton5_clicked(self):
        self.stackedWidget.setCurrentIndex(4)

    # 按钮六：打开第六个面板
    def on_pushButton6_clicked(self):
        self.stackedWidget.setCurrentIndex(5)

    # 按钮七：打开第七个面板
    def on_pushButton7_clicked(self):
        self.stackedWidget.setCurrentIndex(6)

    # 按钮八：打开第八个面板
    def on_pushButton8_clicked(self):
        self.stackedWidget.setCurrentIndex(7)

    # 按钮九：打开第九个面板
    def on_pushButton9_clicked(self):
        self.stackedWidget.setCurrentIndex(8)

    def closeEvent(self, event):
        """
        重写closeEvent方法，实现dialog窗体关闭时执行一些代码
        :param event: close()触发的事件
        :return: None
        """
        reply = QtWidgets.QMessageBox.question(self,
                                               '本程序',
                                               "是否要退出程序？",
                                               QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                               QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            event.accept()
            from UI.main import Module_User_Login
            self.dia=Module_User_Login()
            self.dia.show()
        else:
            event.ignore()

    def test_click(self):
        lineEdit = self.form5.findChild(QLineEdit, "lineEdit")
        print(lineEdit.text())
        lineEdit2 = self.form5.findChild(QLineEdit, "lineEdit_2")
        print(lineEdit2.text())
        reply = QMessageBox.warning(self, "错误",
                                    "账号或密码错误！", QMessageBox.Close)
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Ui_Form_Tree_View()
    sys.exit(app.exec_())